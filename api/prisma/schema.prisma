// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output = "../node_modules/.prisma/client"
}

generator nestgraphql {
  provider = "prisma-nestjs-graphql"
  output = "../src/@generated/prisma-nestjs-graphql"
  outputFilePattern = "{model}/dto/{name}.{type}.ts"
  emitSingle = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum BacklogItemStatus {
  pending
  doing
  done
  stuck
}

enum MemberRole {
  admin
  regular
  pending
}

model Project {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  startDate DateTime?
  targetDate DateTime?
  name String @db.VarChar(255)
  description String?
  stories Story[]
  teamId Int
  team Team @relation(fields: [teamId], references: [id])
}

model Story {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  startDate DateTime?
  targetDate DateTime?
  name String @db.VarChar(255)
  description String?
  backlogItems BacklogItem[]
  project Project @relation(fields: [projectId], references: [id])
  projectId Int
}

model BacklogItem {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  startDate DateTime?
  targetDate DateTime?
  name String @db.VarChar(255)
  description String?
  status BacklogItemStatus @default(pending)
  story Story @relation(fields: [storyId], references: [id])
  storyId Int
  user User? @relation(fields: [userId], references: [id])
  userId String?
}

model User {
  id String @id @unique
  name String
  backlogItems BacklogItem[]
  teams TeamMember[]
}

model Team {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  name String @db.VarChar(255)
  description String?
  members TeamMember[]
  projects Project[]
}

model TeamMember {
  @@id([teamId, userId])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  teamId Int
  team Team @relation(fields: [teamId], references: [id])
  userId String
  user User @relation(fields: [userId], references: [id])
  role MemberRole @default(pending)
  /// @HideField({ match: 'TeamMemberCreate*Input' })
  color String
  @@unique([teamId, color])
}
